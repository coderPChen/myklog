##内存管理
______
####管理什么
	* 内存形式： 分为 stack， 和 堆
		* stack 程序管理，不用我们管理
		* 堆上： 当引用计数（stack 指针指向该堆上内存的 指针数）为0 			时，系统会收回该内存， 当>0时， 系统不会收回
	
总结： 内存管理本质上就是 管理堆上的 引用计数
####ARC 
________
######ARC原理
* mrc 原则：是Who retain，(引用计数加一) Who release （引用计数减一）
* mrc 管理内存，就是 手动的管理 引用计数， 对其+1， -1  来管理内存
#####ARC 和 MRC 之间的关系
* 编译器会自动添加 retain/release/autorelease
* 少一个 强指针时，就会 自动添加 release  （前提是没有添加autorelease）
* 属性被关键字strong时，set 时，会自动添加retain
* 有返回值类方法创建对象时， 会自动添加 autorelease 有autorelease，没有weak时， 也不会添加release：
######ARC关键字
* weak ： 不会自动添加retain， 而且无时，地址会立即为nil
* strong :  设置（set）数值的时，编译器会自动 添加retain ，或者release 
* autorelease: 
* assign ： 就是不会有其他附加的操作： 就是简单的赋值


######runloop
* 点击事件时， 就会形成一次 运行循环
* 第一次：是 main 函数中 建立的 运行循环，代理方法：
* 存在 @autoReleasePool

######循环引用
* 代理对象为什么为weak 
   * 代理协议，容易出现循环引用： 代理对象，是指向其他对象：
* block引用
	* block 中出现的外部变量，会放在堆中， 也就存在指针指向其他对象


#####实际应用中
* Modal 中一般不使用UIImage ，  而使用 URL
	* 因为modal 会一直存在内存中， 如果使用UIImage内存大，而且`不好释放内存`：所以使用URL，然后专门一个类做缓存：（以URL为Key，得到对应的值））
	
* 收到内存警告的时候，做出处理事件
* 调用`c 语言的 copy， retain。create。new  函数`： 要`释放内存free`

#####OBJ 中的类型（objc 对象的类型管理）
* 目的：就是  两个人相互修改，不受影响
* 粗包做法： 直接复制内存 ， 但是 oc 中不是这么做的 ：
           --》 苹果是 有可变版本时出现： --》 才会深拷贝   
* copy / mutabCopy  两个方法   当 该对象 中有可变/不可变  的时候，才可以使用mutabCopy 方法
* oc 对象 实际内存： 是内存中的 isa  指针 指向的 类内存
* copy 会避免 变量类型转换--》       （好处）， 外部也改不了我类中 的变量
* 如果 属性是 NSString 就是 使用 copy 属性
* 做一次  copy  操作 之后 得到的结果 是  不可变的
#######什么操作 会默认 执行copy 操作：  就是要保持 对应的 值： 
*  字典中的key （没有key ，会造成内存访问错误）   
*   block中 放在 stack 中的局部变量： --》 没有就会有 内存访问错误
*  自定义 对象， 要实现copy 功能 要实现  NSCoping  协议





  